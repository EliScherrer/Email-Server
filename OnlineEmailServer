import java.io.*;
import cs180.net.Socket;
import cs180.net.ServerSocket;
import java.util.Scanner;

/**
 * Created by Eli Scherrer on 4/11/2016.
 */
public class OnlineEmailServer extends EmailServer {
    ServerSocket ss;
    FileReader fr;
    BufferedReader b;
    PrintWriter pw;

    public OnlineEmailServer(String filename, int port) throws IOException {
        this.f = new File(filename);
        int tempCount = 0;
        String[] array = new String[200];

        try {
            this.ss = new ServerSocket(port);

        } catch (IOException e) {
            e.printStackTrace();
        }
        ss.setReuseAddress(true);
        try {
            this.s = new Scanner(f);
            while (s.hasNext()) {
                String fullLine = this.s.nextLine();
                array[tempCount] = fullLine;
                String[] splitUp = fullLine.split(",");
                if (splitUp.length == 2) {
                    String[] fuckThisShit = {"fuck", splitUp[0], splitUp[1]};
                    addUser(fuckThisShit);
                }
                tempCount++;
            }
            //rewrite the file
            FileWriter blankSpace = new FileWriter(f);
            for (int i = 0; i < tempCount; i++) {
                blankSpace.write(array[i] + "\n");
            }
            blankSpace.close();
            s.close();
        } catch (FileNotFoundException e) {
            f.createNewFile();
            PrintWriter clearAll = new PrintWriter(f);
            clearAll.print("");
            clearAll.close();
        }
        thereIsAFile = 1;
        this.p = new FileWriter(f,true);
        bw = new BufferedWriter(p);
        this.fr = null;
        this.b = null;
        this.pw = null;
    }

    @Override
    public void run() {
        while (!this.ss.isClosed()) {
            try {
                Socket client = this.ss.accept(); // Replaces stdin
                client.setSoTimeout(60000); // Sets client to timeout after a minute of no request
                processClient(client); // Uses processClient method to process the client connection
            } catch (IOException e) {
                System.out.println("Couldn't accept the socket");
            }
        }

        try {
            this.fr.close();
            this.p.close();
            this.b.close();
            stop();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void processClient(Socket client) throws IOException {

        this.fr = new FileReader(String.valueOf(client.getInputStream())); // create FileReader to read from given file
        this.b = new BufferedReader(fr); //Create BufferedReader to read from FileReader

        this.pw = new PrintWriter(client.getOutputStream()); // Create PrintWriter based off of OutputStream from client

        this.pw.printf(parseRequest(b.readLine())); // Use PrintWriter's print function to send output given what BufferedReader has read

    }
    public void stop() {
        try {
            this.ss.close(); // Close the SocketServer
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
